// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN

//------------------------------------------------------------
// VIEWPORT INFO

// sViewport: info about viewport
//    viewportPoint: location on the viewing plane 
//							x = horizontal position
//							y = vertical position
//							z = plane depth (negative focal length)
//	  pixelCoord:    position of pixel in image
//							x = [0, width)	-> [left, right)
//							y = [0, height)	-> [bottom, top)
//	  resolution:    resolution of viewport
//							x = image width in pixels
//							y = image height in pixels
//    resolutionInv: resolution reciprocal
//							x = reciprocal of image width
//							y = reciprocal of image height
//	  size:       	 in-scene dimensions of viewport
//							x = viewport width in scene units
//							y = viewport height in scene units
//	  ndc: 			 normalized device coordinate
//							x = [-1, +1) -> [left, right)
//							y = [-1, +1) -> [bottom, top)
// 	  uv: 			 screen-space (UV) coordinate
//							x = [0, 1) -> [left, right)
//							y = [0, 1) -> [bottom, top)
//	  aspectRatio:   aspect ratio of viewport
//	  focalLength:   distance to viewing plane

struct sViewport
{
    vec4 viewportPoint;
    
	vec2 pixelCoord, res, resInv, size, ndc, uv;
    
	float aspectRatio, focalLength;
};

// initViewport: calculate the viewing plane (viewport) coordinate
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)

sViewport initViewport(in float viewportHeight, in float focalLength, 
                       in vec2 fragCoord, in vec2 resolution)
{
    sViewport vp;
    
    vp.pixelCoord = fragCoord;
    
    vp.res = resolution;
    vp.resInv = 1.0 / vp.res;
    vp.aspectRatio = vp.res.x * vp.resInv.y;
    
    vp.focalLength = focalLength;
    
    vp.uv = vp.pixelCoord * vp.resInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    
    vp.size = vec2(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = vec4(vp.ndc * vp.size * 0.5, -vp.focalLength, 1.0);
    
    return vp;
}

//------------------------------------------------------------
// RAY INFO

// sRay: ray data structure
//	  orig: origin point in scene
//    dir:  direction vector in scene

struct sRay
{
    vec4 orig, dir;
};

// initRayPersp: initialize perspective ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset

sRay initRayPersp(in vec3 eyePosition, in vec3 viewport)
{
    sRay ray;
    
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point, can ignore when using
    ray.orig = vec4(eyePosition, 1.0);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction, can ignore when using
    ray.dir = vec4(viewport - eyePosition, 0.0);
    
    return ray;
}