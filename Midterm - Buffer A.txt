// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // Variable declarations
    sViewport vp;

    sRay ray;
    
    vec3 coord, lightPos = vec3(iResolution.x / 2.0, 1, 1), normal, tempVec, lightVector, 
         attenIntensity, diffuseIntensity;;
    
    float cosTime = cos(iTime), sinTime = sin(iTime), diffuseCoeff;
    
    mat2 rotation = mat2(cosTime, sinTime, -sinTime, cosTime);
    
    // Get camera info
    initialize(fragCoord, iResolution.xy, vp, ray);
    
    // Calulate cubemap coordinate
    coord = ray.direction.xyz;
    
    coord.y += 0.25 * sin(iTime);
    
    // Rotate camera
    coord.xz = rotation * coord.xz;
    
    // Return cubemap
    fragColor = texture(iChannel0, coord);

    // Calculate surface normal
    normal = normalize(vec3(vp.viewportPoint.xy, 1));
    
    // Calculate light Vector
    lightVector = normalize(lightPos - vec3(vp.pixelCoord, 0));
    
    // Diffuse coefficiant for lambertian reflectance
    diffuseCoeff = max(0.0, dot(normal, lightVector));

    // Attentuation for lambertian reflectance
    tempVec = lightPos * .000001;
    attenIntensity = vec3(1.0 / (1.0 + tempVec + (tempVec * tempVec)));

    // Calculate final diffuse intensity
    diffuseIntensity = diffuseCoeff * attenIntensity;

    // Return texture with shading
    fragColor = texture(iChannel0, coord) * vec4(diffuseIntensity * vec3(1, 1, 1), 1);
}