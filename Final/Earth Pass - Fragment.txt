#version 300 es

#ifdef GL_ES
precision highp float;
#endif

// Uniforms
uniform vec2 uMouse;
uniform sampler2D uTexture;

// Varyings
in vec4 vPosition;
in vec3 vNormal;
in vec2 vTexCoord;

out vec4 rtColor;

mat3 zRotation(float angle)
{
	float sinAngle = sin(angle), cosAngle = cos(angle);
	return mat3(cosAngle, sinAngle, 0, -sinAngle, cosAngle, 0, 0, 0, 1);
}

void main()
{
	vec4 finalColor;
	
	vec3 lightPos = zRotation(4.0 * uMouse.x) * vec3(1, 1, -.1), lightVector, attenuation, 
	     diffuseIntensity, reflectedLight, viewVector;
	
	float diffuseCoeff, specularCoeff;
	
	// Calculate light vector
	lightVector = normalize(lightPos);
	
	// Calculate diffuse coefficient
	diffuseCoeff = max(0.0, dot(vNormal, lightVector));
	
	// Calculate attenuation
	attenuation = 1.0 / lightPos * lightPos;

	// Final diffuse intensity
	diffuseIntensity = diffuseCoeff * attenuation;
	
	// Calculate reflected light
	reflectedLight = reflect(-lightVector, vNormal);
	
	// Calculate view vector
	viewVector = normalize(lightPos - vec3(vPosition));
	
	/*
		Calculate specular coefficient
		We need the conditional to make sure we don't apply the specular coefficiant
		to the other side of the planet
		On my computer, I noticed no performance drops from this conditional
	*/
	if(dot(vNormal, lightPos) > 0.0)
	{
		specularCoeff = dot(reflectedLight, viewVector) * 0.5 + 0.5;
		
		// Raise specular coefficiant
		for(int i = 0; i < 4; i++)
		{
			specularCoeff *= specularCoeff;
		}
	}
	
	// If on side of planet facing away from sun, no specular coefficiant
	else
	{
		specularCoeff = 0.0;
	}

	// Calculate final color
	finalColor = vec4(.15) + vec4(diffuseIntensity, 1) * 
		     texture(uTexture, vTexCoord) + vec4(specularCoeff);
	
	// Output color
	rtColor = finalColor;
}