// Made by Aaron Lurie
// Thanks to Dan Buckstein for the starter code

// asPoint: promote a 3D vector into a 4D vector representing a point (w=1)
//    point: input 3D vector

vec4 asPoint(in vec3 point)
{
    return vec4(point, 1.0);
}

// asOffset: promote a 3D vector into a 4D vector representing an offset (w=0)
//    offset: input 3D vector

vec4 asOffset(in vec3 offset)
{
    return vec4(offset, 0.0);
}

// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)

void calcViewport(out vec3 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in float focalLength,
                  in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;
    
    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;
    
    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;
    
    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2), z = -f
    viewport = vec3(ndc * vec2(aspect, 1.0) * (viewportHeight * 0.5), -focalLength);
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane

void calcRay(out vec4 rayDirection, out vec4 rayOrigin,in vec3 eyePosition, in vec3 viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = asPoint(eyePosition);
    
    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = asOffset(viewport - eyePosition);
}

struct sSphere
{
	vec4 center;
    float radius;
};
    
struct sPointLight
{
	vec4 center;
    vec3 color;
    float intensity;
};
    
void initSphere(out sSphere sphere, in vec3 center, in float radius)
{
	sphere.center = asPoint(center);
    sphere.radius = radius;
}

void initPointLight(out sPointLight light, in vec3 center, in vec3 color, in float intensity)
{
    light.center = asPoint(center);
    light.color = color;
    light.intensity = intensity;
}

float getLengthSquared(in vec2 x)
{
	return dot(x,x);
}

// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin)
{
    // Variables
    sSphere sphere;
    sPointLight light;
    vec3 displacement, position, normal, diffuseIntensity, L, attenIntensity, color;
    vec4 pointDistance;
    float lengthSq, radiusSq, diffuseCoeff;
    
    // Initialize sphere and light
    initSphere(sphere, vec3(0.0, 0.0, -4.0), 0.5);
    initPointLight(light, vec3(5.0, 5.0, 5.0), vec3(1.0, 1.0, 1.0), 1.0);
    
    pointDistance = light.center - sphere.center;
    
    // Some math
    displacement.xy = rayDirection.xy - sphere.center.xy;
    
    lengthSq = getLengthSquared(displacement.xy);
    radiusSq = sphere.radius * sphere.radius;
    
    // If inside sphere
    if(lengthSq <= radiusSq)
    {
        // More math
        displacement.z = radiusSq - lengthSq;
        
        position = sphere.center.xyz + vec3(displacement.x, displacement.y, sqrt(displacement.z));
        normal = (position - sphere.center.xyz) / sphere.radius;
        
        // Calculate diffuse coefficient
        L = vec3(normalize(pointDistance));
        
        diffuseCoeff = max(0.0, dot(normal, L));
        
        // Attenuation coefficient
        attenIntensity = vec3(1.0 / (1.0 + pointDistance / light.intensity + 
                          pointDistance * pointDistance / light.intensity * light.intensity)) + 1.0;
        
        // Final Diffuse intensity
        diffuseIntensity = diffuseCoeff * attenIntensity;
        
        // Final color
        color = diffuseIntensity * normal * light.color;
        
        return vec4(color, 1.0);
	}
    
    // If outside sphere, just do grey
    return vec4(0.5);
}

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)

void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec3 viewport;
    
    vec2 ndc, uv, resolutionInv;float aspect;
    
    const float viewportHeight = 2.0, focalLength = 1.0;
    
    // ray
    vec4 rayDirection, rayOrigin;
    
    // setup
    fragColor = vec4(0.0);
    
    calcViewport(viewport, ndc, uv, aspect, resolutionInv, viewportHeight, 
                 focalLength, fragCoord, iResolution.xy);
    
    calcRay(rayDirection, rayOrigin, vec3(0.0), viewport);
    
    fragColor += calcColor(rayDirection, rayOrigin);
}