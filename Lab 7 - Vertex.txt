#version 300 es

// Input attributes
layout (location = 0) in vec4 aPosition;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoord;

// Varyings
out vec4 vColor, vPosition;
out vec3 vNormal;
out vec2 vTexCoord;

// Input uniforms
uniform mat4 uModelMatrix, uViewMatrix, uViewProjMatrix;
uniform sampler2D uTexture;

// sPointLight: data structure to hold info about lights
// center:    center of light
// color:     color of light
// intensity: intensity of light

struct sPointLight
{
	vec3 pos, color;
	float intensity;
};

// initLight: function to initialize a light
// 	center:    input center of light
// 	color:     input color of light
// 	intensity: input intensity of light

sPointLight initLight(in vec3 pos, in vec3 color, in float intensity)
{
	sPointLight temp;
	
	temp.pos = pos;
	temp.color = color;
	temp.intensity = intensity;
	
	return temp;
}

void main()
{
	// Variable declarations
	// Constant to determine number of lights
	const int NUM_LIGHTS = 3;
	
	sPointLight lights[NUM_LIGHTS];

	mat4 modelViewMatrix = uViewMatrix * uModelMatrix;

	vec4 clipPos = uViewProjMatrix * uModelMatrix * aPosition, position, finalColor;
	
	vec3 normal, lightPos, lightVector, tempVec, attenCoeff, diffuseIntens, reflectLight, viewVector;
	
	float diffuseCoeff, specularCoeff;
	
	// Calculate position and normal in object or view space
	position = aPosition;
	//position = modelViewMatrix * aPosition;
	
	normal = aNormal;
	//normal = mat3(modelViewMatrix) * aNormal;
	
	// Main lighting calculation loop
	for (int i = 0; i < NUM_LIGHTS; i++)
	{
		// Light positioned at (i + 1, i + 1, 1) in object space
		lightPos = vec3(i + 1, i + 1, 1);
		
		// Light positioned at (i + 1, i + 1, 1) in view space
		//lightPos = mat3(modelViewMatrix) * vec3(i + 1, i + 1, 1);
	
		// Initialize at given position, white light, 1.5 intensity
		lights[i] = initLight(lightPos, vec3(1), 1.5);
		
		// Calculate light vector
		lightVector = normalize(lights[i].pos);
	
		// Calculate diffuse coefficient
		diffuseCoeff = max(0.0, dot(normal, lightVector));
		
		// Calculate attenuation, use tempVec for efficiency
		tempVec = lights[i].pos / lights[i].intensity;
		attenCoeff = 1.0 / (tempVec + tempVec * tempVec);
		
		// Final diffuse intensity
		diffuseIntens = diffuseCoeff * attenCoeff;
		
		// Calculate reflected light
		reflectLight = reflect(-lightVector, normal);
		
		viewVector = normalize(lights[i].pos - vec3(position));
		
		// Calculate specular coefficient
		specularCoeff = dot(reflectLight, viewVector) * 0.5 + 0.5;

		// I don't know what the highlight exponent is, 
		// I just kept raising it until it looked good
		for (int j = 0; j < 10; j++)
		{
			specularCoeff *= specularCoeff;		
		}
		
		// Calculate final color for this light
		finalColor += texture(uTexture, aTexCoord) * 
			      vec4(diffuseIntens + specularCoeff * vec3(1) * lights[i].color, 1);
	}
	
	// Factor in global light
	finalColor += 0.15 * vec4(1);
	
	// Set varyings
	vColor = finalColor;
	vPosition = position;
	vNormal = normal;
	vTexCoord = aTexCoord;
		
	// Set position in clip space
	gl_Position = clipPos;
}