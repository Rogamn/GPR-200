#version 300 es

layout (location = 0) in vec4 aPosition;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec4 aTexCoord;

out vec4 color;
out vec3 normal;

uniform mat4 uModelMatrix, uViewMatrix, uProjMatrix, uViewProjMatrix;

struct sPointLight
{
	vec4 center;
	vec3 color;
	float intensity;
};

sPointLight initLight(in vec4 center, in vec3 color, in float intensity)
{
	sPointLight temp;
	
	temp.center = center;
	temp.color = color;
	temp.intensity = intensity;
	
	return temp;
}

void main()
{
	sPointLight light1 = initLight(vec4(1), vec3(1), 1.5);

	vec4 worldPos = uModelMatrix * aPosition, camPos = uViewMatrix * worldPos, clipPos = uProjMatrix * camPos;
	
	vec3 cameraNormal, lightVector, viewVector, tempVec, attenCoeff, diffuseIntensity, finalColor, reflectedLight;
	
	float diffuseCoeff, specularCoeff;

	lightVector = vec3(normalize(light1.center));
	
	diffuseCoeff = max(0.0, dot(aNormal, lightVector));
	
	tempVec = vec3(light1.center / light1.intensity);
	attenCoeff = 1.0 / (tempVec + tempVec * tempVec);
	
	diffuseIntensity = diffuseCoeff * attenCoeff;

	finalColor = diffuseIntensity * vec3(1);
	
	viewVector = normalize(vec3(100));
	reflectedLight = reflect(-lightVector, aNormal);
	
	specularCoeff = max(0.0, dot(reflectedLight, viewVector));
	
	specularCoeff *= specularCoeff;
	specularCoeff *= specularCoeff;
	
	finalColor = 0.15 * vec3(1) + (diffuseIntensity * aNormal + specularCoeff * vec3(1, 1, 1)) * light1.color;
	
	color = vec4(finalColor, 0);
	normal = aNormal;
	
	gl_Position = uProjMatrix * camPos;

	//clipPos = uProjMatrix * uViewMatrix * uModelMatrix * pos;
	//clipPos = uViewProjMatrix * uModelMatrix * pos;

	//mat4 modelViewMatrix = uViewMatrix * uModelMatrix;
	//camPos = modelViewMatrix * aPosition;
	
	//mat3 normalMatrix = transpose(inverse(mat3(modelViewMatrix)));
	//cameraNormal = normalMatrix * aNormal;
	
	//color = vec4(aNormal * 0.5 + 0.5, 1);
	//normal = vec4(aNormal, 0);
	
	//normal = vec4(cameraNormal, 0);
	
	//color = aTexCoord;
	
	//mat4 atlasMat = mat4(.5,   0,  0, 0, 
	//			0,  .5,  0 ,0, 
	//			0,   0,  1, 0, 
	//		       .25, .25, 0, 1);
						 
	//vec4 uv_atlas = atlasMat * aTexCoord;
	
	//color = vec4(specular);
	
	//gl_Position = uProjMatrix * modelViewMatrix * aTexCoord;
}